name: TerraFusion CI/CD

on:
  push:
    branches: [ main, dev ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - dev
          - staging
          - production

env:
  REGISTRY: ghcr.io
  CORE_IMAGE_NAME: terrafusion/gama-core
  CONFIG_SERVICE_IMAGE: terrafusion/config-service
  DRIFTGUARD_OPERATOR_IMAGE: terrafusion/driftguard-operator
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '16'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pylint
      
      - name: Lint Python code
        run: |
          pylint --disable=C0111,C0103,C0303,C0330,C0326 --max-line-length=120 $(find . -name "*.py" | grep -v "venv" | grep -v "__pycache__" | grep -v ".git")
      
      - name: Run Python tests
        run: |
          pytest --cov=. --cov-report=xml
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Node.js dependencies
        run: npm ci
      
      - name: Lint TypeScript code
        run: npm run lint
      
      - name: Build TypeScript
        run: npm run build
      
      - name: Run TypeScript tests
        run: npm test
      
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/coverage-final.json
          fail_ci_if_error: false
  
  build-images:
    needs: build-and-test
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        component: [core, config-service, driftguard-operator]
        include:
          - component: core
            image_name: ${{ env.CORE_IMAGE_NAME }}
            dockerfile: Dockerfile
          - component: config-service
            image_name: ${{ env.CONFIG_SERVICE_IMAGE }}
            dockerfile: k8s/operator/driftguard/Dockerfile.config-service
          - component: driftguard-operator
            image_name: ${{ env.DRIFTGUARD_OPERATOR_IMAGE }}
            dockerfile: k8s/operator/driftguard/Dockerfile
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.image_name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=short
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  
  deploy:
    needs: build-images
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
    
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Kubernetes tools
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
      
      - name: Deploy DriftGuard CRDs
        run: |
          kubectl apply -f k8s/operator/driftguard/crds/
      
      - name: Deploy TerraFusion components
        run: |
          # Create namespace if it doesn't exist
          kubectl create namespace terrafusion-system --dry-run=client -o yaml | kubectl apply -f -
          
          # Deploy core components
          kubectl apply -f k8s/manifests/core/ -n terrafusion-system
          
          # Deploy DriftGuard operator
          kubectl apply -f k8s/operator/driftguard/deployment.yaml
          
          # Deploy config service
          kubectl apply -f k8s/operator/driftguard/config-service-deployment.yaml
      
      - name: Deploy sample DriftGuard resources
        run: |
          kubectl apply -f k8s/operator/driftguard/samples/
      
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/driftguard-operator -n terrafusion-system
          kubectl rollout status deployment/terrafusion-config-service -n terrafusion-system
      
      - name: Deploy application to ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
        run: |
          echo "Deployed TerraFusion to ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }} environment"