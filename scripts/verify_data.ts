/**
 * Data Verification Utility for TerraFusion
 * 
 * This script verifies data flow through the system by:
 * 1. Checking the database tables for property data
 * 2. Verifying data from connectors is present
 * 3. Generating stats about the data
 */

import { db } from '../server/db';
import { properties, propertySales, neighborhoods } from '../shared/schema';
import { count } from 'drizzle-orm';
import * as fs from 'fs';
import * as path from 'path';
import { testDatabaseConnection } from '../server/db';

// Output directory for report
const OUTPUT_DIR = path.join(process.cwd(), 'output');
if (!fs.existsSync(OUTPUT_DIR)) {
  fs.mkdirSync(OUTPUT_DIR, { recursive: true });
}

// Logging utility
function log(message: string, isError = false): void {
  const timestamp = new Date().toISOString();
  const prefix = isError ? '[ERROR]' : '[INFO]';
  console.log(`${prefix} ${timestamp} - ${message}`);
}

// Get counts from database tables
async function getDataCounts() {
  try {
    // Check properties table
    const [propertiesCount] = await db.select({ value: count() }).from(properties);
    log(`Properties in database: ${propertiesCount.value}`);
    
    // Check sales table
    const [salesCount] = await db.select({ value: count() }).from(propertySales);
    log(`Property sales in database: ${salesCount.value}`);
    
    // Check neighborhoods table
    const [neighborhoodsCount] = await db.select({ value: count() }).from(neighborhoods);
    log(`Neighborhoods in database: ${neighborhoodsCount.value}`);
    
    return {
      properties: propertiesCount.value,
      sales: salesCount.value,
      neighborhoods: neighborhoodsCount.value
    };
  } catch (error) {
    log(`Error getting data counts: ${error instanceof Error ? error.message : 'Unknown error'}`, true);
    return {
      properties: 0,
      sales: 0,
      neighborhoods: 0
    };
  }
}

// Check for data files generated by connectors
function checkDataFiles() {
  const files = [
    'cama_data.json',
    'gis_data.json',
    'market_data.json',
    'weather_data.json',
    'census_data.json',
    'spatial_analysis.json'
  ];
  
  const fileResults = {};
  
  for (const file of files) {
    const filePath = path.join(OUTPUT_DIR, file);
    const exists = fs.existsSync(filePath);
    
    if (exists) {
      try {
        const stats = fs.statSync(filePath);
        const fileSize = stats.size;
        const content = fs.readFileSync(filePath, 'utf8');
        const data = JSON.parse(content);
        
        // Get count of items if applicable
        let itemCount = 0;
        if (data.data && Array.isArray(data.data)) {
          itemCount = data.data.length;
        } else if (Array.isArray(data)) {
          itemCount = data.length;
        } else if (data.features && Array.isArray(data.features)) {
          itemCount = data.features.length;
        }
        
        fileResults[file] = {
          exists: true,
          size: fileSize,
          itemCount
        };
        
        log(`Found ${file}: ${fileSize} bytes, ${itemCount} items`);
      } catch (error) {
        fileResults[file] = {
          exists: true,
          error: error instanceof Error ? error.message : 'Unknown error'
        };
        log(`Error reading ${file}: ${error instanceof Error ? error.message : 'Unknown error'}`, true);
      }
    } else {
      fileResults[file] = {
        exists: false
      };
      log(`File ${file} not found`, true);
    }
  }
  
  return fileResults;
}

// Generate a data flow report
async function generateDataFlowReport(dbCounts, fileResults) {
  // Check if we have real data
  const hasRealData = dbCounts.properties > 0 || dbCounts.sales > 0;
  const hasConnectorData = Object.values(fileResults).some((result: any) => result.exists && (result.itemCount > 0 || result.size > 100));
  
  // Calculate data stats
  const totalDatabaseRecords = dbCounts.properties + dbCounts.sales + dbCounts.neighborhoods;
  
  // Generate report
  const report = {
    timestamp: new Date().toISOString(),
    summary: {
      hasRealData,
      hasConnectorData,
      totalDatabaseRecords,
      databaseTables: dbCounts,
      connectorFiles: fileResults,
      status: hasRealData || hasConnectorData ? 'SUCCESS' : 'FAILURE'
    },
    recommendations: []
  };
  
  // Add recommendations based on results
  if (!hasRealData) {
    report.recommendations.push('No property data found in database. Run the import-csv script to load data from CSV files.');
  }
  
  if (!hasConnectorData) {
    report.recommendations.push('No data found from connectors. Run the run_data_connectors.ts script to fetch data from external sources.');
  }
  
  if (dbCounts.properties > 0 && dbCounts.neighborhoods === 0) {
    report.recommendations.push('Properties found but no neighborhoods. Run the extract_neighborhoods function to generate neighborhood data.');
  }
  
  if (hasRealData && hasConnectorData) {
    report.recommendations.push('Data is flowing through the system! You can now run analytical queries and visualizations.');
  }
  
  // Save report to file
  const reportPath = path.join(OUTPUT_DIR, 'data_flow_report.json');
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
  log(`Data flow report saved to ${reportPath}`);
  
  // Print summary
  console.log('\n====================================');
  console.log('TerraFusion Data Flow Report Summary');
  console.log('====================================');
  console.log(`Status: ${report.summary.status}`);
  console.log(`Total database records: ${totalDatabaseRecords}`);
  console.log(`Properties: ${dbCounts.properties}`);
  console.log(`Sales: ${dbCounts.sales}`);
  console.log(`Neighborhoods: ${dbCounts.neighborhoods}`);
  console.log('\nRecommendations:');
  report.recommendations.forEach((rec, i) => {
    console.log(`${i + 1}. ${rec}`);
  });
  console.log('====================================');
  
  return report;
}

// Main function
async function main() {
  try {
    // Test database connection
    const dbConnected = await testDatabaseConnection();
    if (!dbConnected) {
      log('Database connection failed, aborting verification', true);
      return;
    }
    
    log('Starting data verification');
    
    // Get counts from database
    const dbCounts = await getDataCounts();
    
    // Check for data files
    const fileResults = checkDataFiles();
    
    // Generate report
    await generateDataFlowReport(dbCounts, fileResults);
    
    log('Data verification completed');
    
  } catch (error) {
    log(`Error in data verification: ${error instanceof Error ? error.message : 'Unknown error'}`, true);
  }
}

// Run the main function
main()
  .then(() => {
    log('Script completed');
    process.exit(0);
  })
  .catch(error => {
    log(`Fatal error: ${error instanceof Error ? error.message : 'Unknown error'}`, true);
    process.exit(1);
  });